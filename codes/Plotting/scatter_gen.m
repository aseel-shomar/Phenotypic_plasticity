% c2 = readtable("c2_modified_zfull_mat.csv");
% c21 = table2array(c2);
% c21 = c21(:, 2:end);
% namez = string(c2.Properties.VariableNames);
% namez = namez(2:end);
% for i = 1:(size(c21,2))
%    for j = i: size(c21,2)
       xLabel = "X";
       yLabel = "Y";
       fileName = strcat(xLabel, "_", yLabel, "_regression");
       createfigure(rand(10000,1), rand(10000,1), 36, 'k', fileName, xLabel, yLabel);
%    end
% end


function createfigure(X1, Y1, S1, C1, fileName, xLabel, yLabel)
%CREATEFIGURE(X1, Y1, S1, C1)
%  X1:  scatter x
%  Y1:  scatter y
%  S1:  scatter s
%  C1:  scatter c

%  Auto-generated by MATLAB on 21-Jan-2020 08:45:30

% Create figure
figure1 = figure;

% Create axes
axes1 = axes;
hold(axes1,'on');

% Create scatter
scatter1 = scatter(X1,Y1,S1,C1,'DisplayName','data1',...
    'MarkerEdgeColor',[0 0 0]);
xlim([(floor(min(X1)) - 1) (ceil(max(X1)) + 1)]);
ylim([(floor(min(Y1)) - 1) (ceil(max(Y1)) + 1)]);
% Get xdata from plot
xdata1 = get(scatter1, 'xdata');
% Get ydata from plot
ydata1 = get(scatter1, 'ydata');
% Make sure data are column vectors
xdata1 = xdata1(:);
ydata1 = ydata1(:);


% Remove NaN values and warn
nanMask1 = isnan(xdata1(:)) | isnan(ydata1(:));
if any(nanMask1)
    warning('GeneratedCode:IgnoringNaNs', ...
        'Data points with NaN coordinates will be ignored.');
    xdata1(nanMask1) = [];
    ydata1(nanMask1) = [];
end

% Find x values for plotting the fit based on xlim
axesLimits1 = xlim(axes1);
xplot1 = linspace(axesLimits1(1), axesLimits1(2));

% Preallocate for "Show equations" coefficients
coeffs1 = cell(1,1);

% Find coefficients for polynomial (order = 1)
fitResults1 = polyfit(xdata1,ydata1,1);
% Evaluate polynomial
yplot1 = polyval(fitResults1,xplot1);

% Save type of fit for "Show equations"
fittypesArray1(1) = 2;

% Save coefficients for "Show Equation"
coeffs1{1} = fitResults1;

% Plot the fit
fitLine1 = plot(xplot1,yplot1,'DisplayName','   linear','Tag','linear',...
    'LineWidth',3,...
    'Color',[1 0 0]);

% Set new line in proper position
setLineOrder(axes1,fitLine1,scatter1);

% "Show equations" was selected
showEquations(fittypesArray1,coeffs1,2,axes1);

% Create ylabel
ylabel(yLabel);

% Create xlabel
xlabel(xLabel);

% Set the remaining axes properties
set(axes1,'FontName','Arial','FontSize',20,'FontWeight','bold');
% Create textbox
[cor, p] = corr(X1, Y1);
if p < 0.0001
    str = 'p-value < 0.0001';
elseif p < 0.001
    str = 'p-value < 0.001';
elseif p < 0.01
    str = 'p-value < 0.01';
elseif p < 0.05
    str = 'p-value < 0.05';
else
    str = 'Insignificant correlation';
end
cor1 = string(cor);
r_sq = string(cor^2);
annotation(figure1,'textbox',...
    [0.509088623115868 0.84539210844217 0.269982709320202 0.048742710120068],...
    'String',sprintf("R^2 = %s", r_sq),...
    'LineStyle','none',...
    'FontSize',16,...
    'FontName','Arial',...
    'FitBoxToText','off');
% annotation(figure1,'textbox',...
%     [0.309088623115868 0.8550039210844217 0.269982709320202 0.048742710120068],...
%     'String',sprintf("\\rho = %s", cor1),...
%     'LineStyle','none',...
%     'FontSize',16,...
%     'FontName','Arial',...
%     'FitBoxToText','off');
set(gcf, "position", [1 1 733 556]);
print(fileName, '-dtiff','-r600');
end

%-------------------------------------------------------------------------%
function setLineOrder(axesh1, newLine1, associatedLine1)
%SETLINEORDER(AXESH1,NEWLINE1,ASSOCIATEDLINE1)
%  Set line order
%  AXESH1:  axes
%  NEWLINE1:  new line
%  ASSOCIATEDLINE1:  associated line

% Get the axes children
hChildren = get(axesh1,'Children');
% Remove the new line
hChildren(hChildren==newLine1) = [];
% Get the index to the associatedLine
lineIndex = find(hChildren==associatedLine1);
% Reorder lines so the new line appears with associated data
hNewChildren = [hChildren(1:lineIndex-1);newLine1;hChildren(lineIndex:end)];
% Set the children:
set(axesh1,'Children',hNewChildren);
end
%-------------------------------------------------------------------------%
function showEquations(fittypes1, coeffs1, digits1, axesh1)
%SHOWEQUATIONS(FITTYPES1,COEFFS1,DIGITS1,AXESH1)
%  Show equations
%  FITTYPES1:  types of fits
%  COEFFS1:  coefficients
%  DIGITS1:  number of significant digits
%  AXESH1:  axes

n = length(fittypes1);
txt = cell(length(n + 1) ,1);
txt{1,:} = ' ';
for i = 1:n
    txt{i + 1,:} = getEquationString(fittypes1(i),coeffs1{i},digits1,axesh1);
end

text(.05,.995,txt,'parent',axesh1, ...
    'verticalalignment','top','units','normalized',...
    'FontName', 'Arial','FontSize', 16);

end
%-------------------------------------------------------------------------%
function [s1] = getEquationString(fittype1, coeffs1, digits1, axesh1)
%GETEQUATIONSTRING(FITTYPE1,COEFFS1,DIGITS1,AXESH1)
%  Get "Show Equation" text
%  FITTYPE1:  type of fit
%  COEFFS1:  coefficients
%  DIGITS1:  number of significant digits
%  AXESH1:  axes

if isequal(fittype1, 0)
    s1 = 'Cubic spline interpolant';
elseif isequal(fittype1, 1)
    s1 = 'Shape-preserving interpolant';
else
    op = '+-';
    format1 = ['%s %0.',num2str(digits1),'g*x^{%s} %s'];
    format2 = ['%s %0.',num2str(digits1),'g'];
    xl = get(axesh1, 'xlim');
    fit =  fittype1 - 1;
    s1 = sprintf('y =');
    th = text(xl*[.95;.05],1,s1,'parent',axesh1, 'vis','off');
    if abs(coeffs1(1) < 0)
        s1 = [s1 ' -'];
    end
    for i = 1:fit
        sl = length(s1);
        if ~isequal(coeffs1(i),0) % if exactly zero, skip it
            s1 = sprintf(format1,s1,abs(coeffs1(i)),num2str(fit+1-i), op((coeffs1(i+1)<0)+1));
        end
        if (i==fit) && ~isequal(coeffs1(i),0)
            s1(end-5:end-2) = []; % change x^1 to x.
        end
        set(th,'string',s1);
        et = get(th,'extent');
        if et(1)+et(3) > xl(2)
            s1 = [s1(1:sl) sprintf('\n     ') s1(sl+1:end)];
        end
    end
    if ~isequal(coeffs1(fit+1),0)
        sl = length(s1);
        s1 = sprintf(format2,s1,abs(coeffs1(fit+1)));
        set(th,'string',s1);
        et = get(th,'extent');
        if et(1)+et(3) > xl(2)
            s1 = [s1(1:sl) sprintf('\n     ') s1(sl+1:end)];
        end
    end
    delete(th);
    % Delete last "+"
    if isequal(s1(end),'+')
        s1(end-1:end) = []; % There is always a space before the +.
    end
    if length(s1) == 3
        s1 = sprintf(format2,s1,0);
    end
end
end
